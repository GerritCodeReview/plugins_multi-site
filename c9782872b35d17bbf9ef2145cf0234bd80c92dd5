{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b8b41582_345b5281",
        "filename": "setup_local_env/configs/kafka.jaas",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2024-05-23T14:14:35Z",
      "side": 1,
      "message": "where do you use this file, it is not mounted in the docker container",
      "revId": "c9782872b35d17bbf9ef2145cf0234bd80c92dd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64d386d1_dda31be5",
        "filename": "setup_local_env/configs/kafka.jaas",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2024-05-23T14:34:35Z",
      "side": 1,
      "message": "As I said in the zookeper jaas file, I think  you dont need file because in the cocker image [1] you are providing:\n- KAFKA_ZOOKEEPER_PROTOCOL\n- KAFKA_ZOOKEEPER_PASSWORD\n- KAFKA_ZOOKEEPER_USER\n\nReferences:\n[1] https://hub.docker.com/r/bitnami/kafka/",
      "parentUuid": "b8b41582_345b5281",
      "revId": "c9782872b35d17bbf9ef2145cf0234bd80c92dd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51ff4267_eae72389",
        "filename": "setup_local_env/configs/zoo.jaas",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2024-05-23T14:14:35Z",
      "side": 1,
      "message": "where do you use this file? it is not mounted in the docker container.",
      "revId": "c9782872b35d17bbf9ef2145cf0234bd80c92dd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d00f70f_0900512c",
        "filename": "setup_local_env/configs/zoo.jaas",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2024-05-23T14:30:37Z",
      "side": 1,
      "message": "I am not quite sure but I think you dont need this file because in the docker image [1] you are providing the:\n- ZOO_ENABLE_AUTH\t\n- ZOO_CLIENT_USER\n- ZOO_SERVER_USERS\n- ZOO_CLIENT_PASSWORD\n- ZOO_SERVER_PASSWORDS\n\nReferences: \n[1] https://hub.docker.com/r/bitnami/zookeeper/",
      "parentUuid": "51ff4267_eae72389",
      "revId": "c9782872b35d17bbf9ef2145cf0234bd80c92dd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9cee71b_dd4d5f7e",
        "filename": "setup_local_env/docker-compose-core.yaml",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2024-05-23T14:05:26Z",
      "side": 1,
      "message": "I think this values should be \"yes\". The documentation [1] says:\n\n```\nZOO_ENABLE_AUTH\t      Enable ZooKeeper auth. It uses SASL/Digest-MD5.\t     no```\n\nReference:\n[1] https://hub.docker.com/r/bitnami/zookeeper/",
      "revId": "c9782872b35d17bbf9ef2145cf0234bd80c92dd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d7243f9_54b96ac7",
        "filename": "setup_local_env/docker-compose-core.yaml",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1149185
      },
      "writtenOn": "2024-05-23T14:05:26Z",
      "side": 1,
      "message": "Do we want to keep this?",
      "revId": "c9782872b35d17bbf9ef2145cf0234bd80c92dd5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c9782872b35d17bbf9ef2145cf0234bd80c92dd5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c9782872b35d17bbf9ef2145cf0234bd80c92dd5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "c9782872b35d17bbf9ef2145cf0234bd80c92dd5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c9782872b35d17bbf9ef2145cf0234bd80c92dd5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c9782872b35d17bbf9ef2145cf0234bd80c92dd5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}