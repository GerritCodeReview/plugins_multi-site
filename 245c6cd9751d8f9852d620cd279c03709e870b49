{
  "comments": [
    {
      "key": {
        "uuid": "3b03eead_2105ac39",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-27T23:15:02Z",
      "side": 1,
      "message": "Why do we need to react to ChangeEvents? The update of a change meta-data is already part of the L70 because it is a ref-update on the \u0027/meta\u0027 ref, isn\u0027t it?",
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d6fc151_f7dc44b2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 79,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-27T16:11:34Z",
      "side": 1,
      "message": "The idea behind this implementation is that:\n* if we are the the node producing the event (i.e.:!Context.isForwardedEvent()), as soon as a RefUpdatedEvent is intercepted, \n* if we are a replica node (i.e.:Context.isForwardedEvent()), as soon as we intercept a ChangeEvent, the refs/multi-site/project-version gets updated\n\nUpdate of the version skips the checks in the shared-ref db: https://gerrit-review.googlesource.com/c/plugins/multi-site/+/250392/18/src/main/java/com/googlesource/gerrit/plugins/multisite/validation/RefUpdateValidator.java#89",
      "range": {
        "startLine": 70,
        "startChar": 3,
        "endLine": 79,
        "endChar": 5
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc9bb3de_77db8243",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 87,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-27T20:50:38Z",
      "side": 1,
      "message": "This update will trigger compareAndPut, which at the moment is expecting an ObjectId as value to set. I believe we will need to modify the shared-refdb implementation to allow to put different data types. For example for the versioning we want to put a long with the version value. The object ID won\u0027t be useful to retrieve the current version in master.",
      "range": {
        "startLine": 87,
        "startChar": 42,
        "endLine": 87,
        "endChar": 48
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee74683f_e2b93764",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 87,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-27T23:15:02Z",
      "side": 1,
      "message": "mmm ... would that break the consistency of the Git repository then?\nCan we do the same that Gerrit does with All-Projects (refs/meta/version) instead?\n\nI believe it is: refs/meta/version \u003d\u003e ObjectId \u003d\u003e BLOB, where BLOB contains the version number.",
      "parentUuid": "fc9bb3de_77db8243",
      "range": {
        "startLine": 87,
        "startChar": 42,
        "endLine": 87,
        "endChar": 48
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c744815_7c248abc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 89,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-27T23:15:02Z",
      "side": 1,
      "message": "Can also be useful to trace what was the timestamp we were trying to update on the refs/multi-site/version.",
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c718339_fd752ed2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 97,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-27T23:15:02Z",
      "side": 1,
      "message": "This can be static final and defined at the top of the class.",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 192
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}