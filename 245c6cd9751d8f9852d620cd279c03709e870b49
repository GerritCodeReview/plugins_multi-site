{
  "comments": [
    {
      "key": {
        "uuid": "3b03eead_2105ac39",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-27T23:15:02Z",
      "side": 1,
      "message": "Why do we need to react to ChangeEvents? The update of a change meta-data is already part of the L70 because it is a ref-update on the \u0027/meta\u0027 ref, isn\u0027t it?",
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4970da5_3073a5ca",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-28T13:48:51Z",
      "side": 1,
      "message": "Yes, sorry you are right, no need of reacting on ChangeEvent. Still there is a little problem:\n\n* These are the events streamed when a new change is created: ref-updated, ref-replication-scheduled, comment-added, ref-replicated (ref has been replicated on a particular node), ref-replication-done (ref has been replicated on all the nodes)\n\n* On the node producing the change we can easily update the local version when intercepting ref-updated events\n\n* On the replica node, we could update the local version when intercepting ref-replicated events. RefReplicatedEvent has a targetNode method (example of value: \"/tmp/gerrit_setup/instance-2/git/myrepo.git\" ) which we could use, BUT the replica node should know its own node name (again the  instance ID would be useful here). Maybe we could somehow use the Gerrit \"serverName\"?\n\n* Unfortunately GitReferenceUpdatedListener.onGitReferenceUpdated is not triggered when the consumer node is updated so it cannot be used.\n\nWDYT? How can we neatly add the concept of node name in each instance?",
      "parentUuid": "3b03eead_2105ac39",
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3a20576_25cfe40b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-28T22:33:46Z",
      "side": 1,
      "message": "\u003e Yes, sorry you are right, no need of reacting on ChangeEvent. Still there is a little problem:\n\u003e \n\u003e * These are the events streamed when a new change is created: ref-updated, ref-replication-scheduled, comment-added, ref-replicated (ref has been replicated on a particular node), ref-replication-done (ref has been replicated on all the nodes)\n\nYep, I believe only ref-updated is useful in the producing node, as you said.\n\n\u003e * On the node producing the change we can easily update the local version when intercepting ref-updated events\n\u003e \n\u003e * On the replica node, we could update the local version when intercepting ref-replicated events. RefReplicatedEvent has a targetNode method (example of value: \"/tmp/gerrit_setup/instance-2/git/myrepo.git\" ) which we could use, BUT the replica node should know its own node name (again the  instance ID would be useful here). Maybe we could somehow use the Gerrit \"serverName\"?\n\nAt the moment, the receiving node just doesn\u0027t know. What it could do is to update its version every time it sees a \"ref-replicated\". Nodes will update their version more time than needed, but it should be harmless.\n\nMakes sense?",
      "parentUuid": "f4970da5_3073a5ca",
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0403b9ec_d545e2b8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-28T22:45:58Z",
      "side": 1,
      "message": "I believe this could lead to problems. Imagine you have nodes A, B, C.\n* \"Node A\" updates refs/changes/XX/YYY/meta \u003d\u003e Created RefUpdated(ref\u003drefs/changes/XX/YYY/meta, createdOn\u003d123456)\n* Tries to replicate to Node B and C\n* Node B replication \u003d\u003e OK\n* Node C replication \u003d\u003e Failed\n* Node B and C will both receive RefReplicatedEvent(ref\u003drefs/changes/XX/YYY/meta, targetNode\u003d\"Node B\", createdOn\u003d123555)\n* Both Node B and C will update them version, setting it to RefUpdated.createdOn (somehow we will have to link RefReplicatedEvent to RefUpdated)",
      "parentUuid": "f3a20576_25cfe40b",
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2231e809_afb317d8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-28T23:38:19Z",
      "side": 1,
      "message": "\u003e I believe this could lead to problems. Imagine you have nodes A, B, C.\n\u003e * \"Node A\" updates refs/changes/XX/YYY/meta \u003d\u003e Created RefUpdated(ref\u003drefs/changes/XX/YYY/meta, createdOn\u003d123456)\n\u003e * Tries to replicate to Node B and C\n\u003e * Node B replication \u003d\u003e OK\n\u003e * Node C replication \u003d\u003e Failed\n\u003e * Node B and C will both receive RefReplicatedEvent(ref\u003drefs/changes/XX/YYY/meta, targetNode\u003d\"Node B\", createdOn\u003d123555)\n\u003e * Both Node B and C will update them version, setting it to RefUpdated.createdOn (somehow we will have to link RefReplicatedEvent to RefUpdated)\n\nNope, the Node B and C will need to manage the \u0027ref-replicated\u0027 event only as a trigger, but then use the same logic of the ref-update: reading the ref from the local repository and setting the timestamp to the value of the commit time they actually have received.\n\nIn your example, if Node C the ref-replicated (associated with Node B) event BUT replication to Node C failed, the commit time of the local ref will still be outdated and thus the version will be kept outdated as well.",
      "parentUuid": "0403b9ec_d545e2b8",
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "791a3b09_1b6bae76",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-29T20:11:22Z",
      "side": 1,
      "message": "I have updated a new PS to implement it that way. Still a WIP since I need to test is properly, but it should give you the idea of the implementation.",
      "parentUuid": "2231e809_afb317d8",
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "885ce1ef_72d7b239",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-30T15:49:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "791a3b09_1b6bae76",
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d6fc151_f7dc44b2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 79,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-27T16:11:34Z",
      "side": 1,
      "message": "The idea behind this implementation is that:\n* if we are the the node producing the event (i.e.:!Context.isForwardedEvent()), as soon as a RefUpdatedEvent is intercepted, \n* if we are a replica node (i.e.:Context.isForwardedEvent()), as soon as we intercept a ChangeEvent, the refs/multi-site/project-version gets updated\n\nUpdate of the version skips the checks in the shared-ref db: https://gerrit-review.googlesource.com/c/plugins/multi-site/+/250392/18/src/main/java/com/googlesource/gerrit/plugins/multisite/validation/RefUpdateValidator.java#89",
      "range": {
        "startLine": 70,
        "startChar": 3,
        "endLine": 79,
        "endChar": 5
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f0ba663_c6741429",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 79,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-28T22:33:46Z",
      "side": 1,
      "message": "\u003e The idea behind this implementation is that:\n\u003e * if we are the the node producing the event (i.e.:!Context.isForwardedEvent()), as soon as a RefUpdatedEvent is intercepted, \n\u003e * if we are a replica node (i.e.:Context.isForwardedEvent()), as soon as we intercept a ChangeEvent, the refs/multi-site/project-version gets updated\n\nI still do not understand why we need to react on ChangeEvent though: it is already covered by ref-updated right?",
      "parentUuid": "3d6fc151_f7dc44b2",
      "range": {
        "startLine": 70,
        "startChar": 3,
        "endLine": 79,
        "endChar": 5
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a286ccae_2a9ed70c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 79,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-29T20:11:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f0ba663_c6741429",
      "range": {
        "startLine": 70,
        "startChar": 3,
        "endLine": 79,
        "endChar": 5
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc9bb3de_77db8243",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 87,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-27T20:50:38Z",
      "side": 1,
      "message": "This update will trigger compareAndPut, which at the moment is expecting an ObjectId as value to set. I believe we will need to modify the shared-refdb implementation to allow to put different data types. For example for the versioning we want to put a long with the version value. The object ID won\u0027t be useful to retrieve the current version in master.",
      "range": {
        "startLine": 87,
        "startChar": 42,
        "endLine": 87,
        "endChar": 48
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee74683f_e2b93764",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 87,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-27T23:15:02Z",
      "side": 1,
      "message": "mmm ... would that break the consistency of the Git repository then?\nCan we do the same that Gerrit does with All-Projects (refs/meta/version) instead?\n\nI believe it is: refs/meta/version \u003d\u003e ObjectId \u003d\u003e BLOB, where BLOB contains the version number.",
      "parentUuid": "fc9bb3de_77db8243",
      "range": {
        "startLine": 87,
        "startChar": 42,
        "endLine": 87,
        "endChar": 48
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d46c60ad_d1291cc3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 87,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-28T22:33:46Z",
      "side": 1,
      "message": "On the shared ref-db, we should also record the BLOB value, which would contain the timestamp. That is needed because a node that is outdated needs to know what is the BLOB value of the latest version. Because is outdated, its local BLOB does not contain that information.",
      "parentUuid": "ee74683f_e2b93764",
      "range": {
        "startLine": 87,
        "startChar": 42,
        "endLine": 87,
        "endChar": 48
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad97b9a2_e1f90030",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 87,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-29T20:11:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d46c60ad_d1291cc3",
      "range": {
        "startLine": 87,
        "startChar": 42,
        "endLine": 87,
        "endChar": 48
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e016dbe0_675eaeb2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 87,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-30T16:06:26Z",
      "side": 1,
      "message": "We will have to expose a new method in the global-refdb to store the value, right?\n\nLike: boolean compareAndPut(Project.NameKey project, Ref currRef, String newValue)\n\nWe will also need a method to get the value which isn\u0027t currently available:\n\nString get(Project.NameKey project, Ref currRef)\n\nWDYT?",
      "parentUuid": "ad97b9a2_e1f90030",
      "range": {
        "startLine": 87,
        "startChar": 42,
        "endLine": 87,
        "endChar": 48
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71785c82_41c18021",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 87,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-02-07T15:05:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e016dbe0_675eaeb2",
      "range": {
        "startLine": 87,
        "startChar": 42,
        "endLine": 87,
        "endChar": 48
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c744815_7c248abc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 89,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-27T23:15:02Z",
      "side": 1,
      "message": "Can also be useful to trace what was the timestamp we were trying to update on the refs/multi-site/version.",
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7198b33_fa8fe3d3",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 89,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-30T08:20:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c744815_7c248abc",
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c718339_fd752ed2",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 97,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-01-27T23:15:02Z",
      "side": 1,
      "message": "This can be static final and defined at the top of the class.",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 192
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2654d168_55b3913e",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdate.java",
        "patchSetId": 18
      },
      "lineNbr": 97,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2020-01-29T20:11:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c718339_fd752ed2",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 97,
        "endChar": 192
      },
      "revId": "245c6cd9751d8f9852d620cd279c03709e870b49",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}