{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f58cb979_7ade02f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2021-03-22T13:56:21Z",
      "side": 1,
      "message": "Maybe you didn\u0027t spot my comment because I didn\u0027t vote",
      "revId": "e65fc1622063897ef4b3714440de27c8d925a2bc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "533594c6_ffb4a952",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/multisite/forwarder/ForwardedCacheEvictionHandlerIT.java",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2021-03-19T13:16:47Z",
      "side": 1,
      "message": "optional:\nTime based waiting, for positive test results, can be unpredictable.\nIf the test machine is under heavy load the test may not finish during the given timeout. If the test machine is fast the test may wait longer than necessary.\n\nUsing CyclicBarrier (or something similar like CountdownLatch) could make the positive case finish faster and is also a more correct approach.\nWe could have a longer timeout for the negative case.",
      "revId": "e65fc1622063897ef4b3714440de27c8d925a2bc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "487dbf8b_727cbe4b",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/multisite/forwarder/ForwardedCacheEvictionHandlerIT.java",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-22T14:03:37Z",
      "side": 1,
      "message": "\u003e optional:\n\u003e Time based waiting, for positive test results, can be unpredictable.\n\u003e If the test machine is under heavy load the test may not finish during the given timeout. If the test machine is fast the test may wait longer than necessary.\n\nTrue, I need to see if there is any way to being waken up by the cache notification.\n\n\u003e Using CyclicBarrier (or something similar like CountdownLatch) could make the positive case finish faster and is also a more correct approach.\n\u003e We could have a longer timeout for the negative case.\n\nI believe the problem is the failing scenario, correct?\nIn theory, we should give an arbitrary long time for that to fail (e.g. tens of minutes) which it would impact the overall execution time.\n\nIs there a way with the CyclicBarrier to avoid that?\nOtherwise, it is as good as the current code with just a very high timeout.",
      "parentUuid": "533594c6_ffb4a952",
      "revId": "e65fc1622063897ef4b3714440de27c8d925a2bc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b05f160_a4910a2b",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/multisite/forwarder/ForwardedCacheEvictionHandlerIT.java",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2021-03-22T15:15:40Z",
      "side": 1,
      "message": "\u003e I believe the problem is the failing scenario, correct?\n\nYes, but how often do we expect to have the failing scenario?\nThe failing scenario, which should only occur on some incompatible changes in Gerrit core, can take longer. We could even give it 1 minute, why not?\n\nFor the positive case, which should be 99.99% of the time, we want to wait as\nshort as possible but not shorter than that. Usage of CyclicBarrier would help\nbut this is maybe not so critical as WaitUtil is polling every 50ms.\nHowever, even if you don\u0027t want to use java.util.concurrent utilities here, one second waiting time could be too short when the test machine is under heavy load.\n\nWhy not increase the CACHE_EVICTION_TIMEOUT?",
      "parentUuid": "487dbf8b_727cbe4b",
      "revId": "e65fc1622063897ef4b3714440de27c8d925a2bc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e474434_ae76c707",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/multisite/forwarder/ForwardedCacheEvictionHandlerIT.java",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-23T14:25:44Z",
      "side": 1,
      "message": "\u003e \u003e I believe the problem is the failing scenario, correct?\n\u003e \n\u003e Yes, but how often do we expect to have the failing scenario?\n\u003e The failing scenario, which should only occur on some incompatible changes in Gerrit core, can take longer. We could even give it 1 minute, why not?\n\u003e \n\u003e For the positive case, which should be 99.99% of the time, we want to wait as\n\u003e short as possible but not shorter than that. Usage of CyclicBarrier would help\n\u003e but this is maybe not so critical as WaitUtil is polling every 50ms.\n\u003e However, even if you don\u0027t want to use java.util.concurrent utilities here, one second waiting time could be too short when the test machine is under heavy load.\n\u003e \n\u003e Why not increase the CACHE_EVICTION_TIMEOUT?\n\nIt was a 10 seconds at the beginning, but then @Tony commented with:\n\"Also, 10 seconds seems a bit too much?\"\n\n@Tony any comments?",
      "parentUuid": "9b05f160_a4910a2b",
      "revId": "e65fc1622063897ef4b3714440de27c8d925a2bc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "409c7269_153b64ad",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/multisite/forwarder/ForwardedCacheEvictionHandlerIT.java",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2021-03-23T15:27:29Z",
      "side": 1,
      "message": "This timeout represents the maximum time we are willing to wait before feeling confident to assert that cache eviction did not happen successfully (within a certain boundary of confidence).\n\nI thought that 10 seconds was too much because usually cache eviction, even though executed asynchronously, gets triggered quickly (tens of millis? hundreds of millis?).\n\nI agree this might take sensibly longer on a busy system and we are exposed to false negatives, but then again this is true for most timeout-based assertions.\n\nDo we have some data to base this estimation on? if not, then every timeout value proposed is an arbitrary estimation and it could always be argued that increasing it would give a higher level of confidence.\n\nHaving said that, if you have good reasons to believe the current value is too short feel free to raise it to some higher value that makes sense in this scenario.",
      "parentUuid": "9e474434_ae76c707",
      "revId": "e65fc1622063897ef4b3714440de27c8d925a2bc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae476034_708859a8",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/multisite/forwarder/ForwardedCacheEvictionHandlerIT.java",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-23T23:16:58Z",
      "side": 1,
      "message": "Thanks @Tony for your feedback. Let\u0027s put it to 1 minute, meaning that in the worst case scenario we\u0027ll wait that time to realise that the test failed.\n\nIn real terms, as you said, the event should come within a few msec, so 60 seconds is already 2 orders of magnitude bigger than the expected time, that should be fairly enough.",
      "parentUuid": "409c7269_153b64ad",
      "revId": "e65fc1622063897ef4b3714440de27c8d925a2bc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}