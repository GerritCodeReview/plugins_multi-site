{
  "comments": [
    {
      "key": {
        "uuid": "c295632e_5de70c24",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/BatchRefUpdateValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-28T14:33:21Z",
      "side": 1,
      "message": "This isn\u0027t working either, because we get the latest SHA1 of the ref, which is already the updated value.",
      "revId": "aae31767b49d331572fc5d9a396c920b258fd35f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5da7d35e_cab90e25",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/BatchRefUpdateValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-06-28T15:00:17Z",
      "side": 1,
      "message": "That\u0027s the point here. I was wondering if we have to compare and update all chain of changes? It\u0027s enough that after batch update for every ref we compare with zk local ref before update \"p.compareRef\" and updated zk to \"head\" of local ref after update \"current.getObjectId()\". Example for ref1 have have 0(in zk) and new changes 0 -\u003e 1 -\u003e 2 -\u003e 3 so instead of doing loop and updating zk to 1,2 and and finally to 3 w can do one check if 0 \u003d\u003d zk if yes zk \u003d3 and we can do that separately for each unique ref in batch. It\u0027s just a code snippet for discussion.",
      "parentUuid": "c295632e_5de70c24",
      "revId": "aae31767b49d331572fc5d9a396c920b258fd35f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5329e5dc_d7b2446b",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/BatchRefUpdateValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-06-28T15:08:30Z",
      "side": 1,
      "message": "\u003e That\u0027s the point here. I was wondering if we have to compare and update all chain of changes? It\u0027s enough that after batch update for every ref we compare with zk local ref before update \"p.compareRef\" and updated zk to \"head\" of local ref after update \"current.getObjectId()\".\n\nBut the p.compareRef could be largely obsolete, because it has been taken well before the ref-update happened.\n\nImagine you have concurrency on that repo and the SHA1 *before* the update was 0. Then you start trying the update and you go in contention with another push for 20-30s. After that you succeed and execute the ref-update, but the SHA1 *after the contention is 4.\n\nThen you try to do a compare and set of 0-\u003e3 but it will fail, because you assume that the current SHA1 is 0, but actually it has been already updated to 4, because of the concurrent push that went into the retry cycle.\n\nThis fix therefore doesn\u0027t really address the underlying issue IMHO.\n\nAny more ideas? Comments?",
      "parentUuid": "5da7d35e_cab90e25",
      "revId": "aae31767b49d331572fc5d9a396c920b258fd35f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daa233e8_b86aaf25",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/multisite/validation/BatchRefUpdateValidator.java",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2019-06-29T09:46:22Z",
      "side": 1,
      "message": "What about this change after your\u0027s latest patch set for parent change? We are updating local ref before update in a lock session so in theory we shouldn\u0027t have collision with another push(that\u0027s your change). Then we are setting zookeeper to the local ref head after update. I have added unit test which is addressing issue which is not solved in the patch set for parent change.",
      "parentUuid": "5329e5dc_d7b2446b",
      "revId": "aae31767b49d331572fc5d9a396c920b258fd35f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}